/*******************************************************************************
 * Copyright (c) Raymond NANEON  - 2013.
 * Universite de Technologie de Troyes - CEDRE (www.utt.fr), since 1993.
 * This software is governed by the CeCILL license under French law and abiding by the
 * rules of distribution of free software. You can use, modify and/or 
 * redistribute the software under the terms of the CeCILL license as 
 * circulated by CEA, CNRS and INRIA at the following URL 
 * "http://www.cecill.info". 
 * As a counterpart to the access to the source code and rights to copy, modify 
 * and redistribute granted by the license, users are provided only with a 
 * limited warranty and the software's author, the holder of the economic 
 * rights, and the successive licensors have only limited liability. In this 
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user 
 * in light of its specific status of free software, that may mean that it
 * is complicated to manipulate, and that also therefore means that it is 
 * reserved for developers and experienced professionals having in-depth
 * computer knowledge. Users are therefore encouraged to load and test the 
 * software's suitability as regards their requirements in conditions enabling
 * the security of their systems and/or data to be ensured and, more generally, 
 * to use and operate it in the same conditions as regards security. The
 * fact that you are presently reading this means that you have had knowledge 
 * of the CeCILL license and that you accept its terms.
 * 
 * Do not remove this copyright message
 * 
 * Contributors:
 *     Raymond NANEON - initial API and implementation
 ******************************************************************************/
/**
 * 
 */
package org.utt.rfcct.serveur.components.controlers;

import org.utt.fwkuttcompetences.serveur.modele.rfcct.EODomaine;
import org.utt.fwkuttcompetences.serveur.modele.rfcct.EOTypeTiers;
import org.utt.rfcct.serveur.components.assistants.modules.ModuleCompetenceTiersPrincipale;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import er.extensions.eof.ERXEC;

/**
 * @author Raymond NANEON <raymond.naneon at utt.fr> 5 juil. 2013
 */
@SuppressWarnings("all")
public class ModuleCompetenceTiersPrincipaleCtrl extends
		ModuleCtrl<ModuleCompetenceTiersPrincipale> {
	
	EOEditingContext ec;
	private NSArray<EOTypeTiers> lesTypeTiers;
	private EOTypeTiers itemTypeTier;
	private EOTypeTiers selectionTypeTier;

	private boolean isStructure;
	private boolean isIndividu;
	private String estStructure;
	private String estIndividu;
	private boolean tiersTypePers = false;
	// Les domaines
	private NSArray<EODomaine> lesDomaines;
	private EODomaine itemDomaine;
	private  NSMutableArray<EODomaine> checkDomaines;
	private EODomaine checkDomaineItem;
	private NSMutableArray<EODomaine> removedDomaines;

	/**
	 * @param component
	 */
	public ModuleCompetenceTiersPrincipaleCtrl(
			ModuleCompetenceTiersPrincipale component) {
		super(component);
		// TODO Auto-generated constructor stub
		ec = ERXEC.newEditingContext();
	}

	/**
	 * @return the lesTypeTiers
	 */
	public NSArray<EOTypeTiers> lesTypeTiers() {
		if (lesTypeTiers == null)
			lesTypeTiers = EOTypeTiers.fetchAllEOTypeTierses(
					ERXEC.newEditingContext(), EOTypeTiers.ID.ascs());
		return lesTypeTiers;
	}

	/**
	 * @param lesTypeTiers
	 *            the lesTypeTiers to set
	 */
	public void setLesTypeTiers(NSArray<EOTypeTiers> lesTypeTiers) {
		this.lesTypeTiers = lesTypeTiers;
	}

	/**
	 * @return the itemTypeTier
	 */
	public EOTypeTiers itemTypeTier() {
		return itemTypeTier;
	}

	/**
	 * @param itemTypeTier
	 *            the itemTypeTier to set
	 */
	public void setItemTypeTier(EOTypeTiers itemTypeTier) {
		this.itemTypeTier = itemTypeTier;
	}

	/**
	 * @return the selectionTypeTier
	 */
	public EOTypeTiers selectionTypeTier() {
		return selectionTypeTier;
	}

	/**
	 * @param selectionTypeTier
	 *            the selectionTypeTier to set
	 */
	public void setSelectionTypeTier(EOTypeTiers selectionTypeTier) {
		this.selectionTypeTier = selectionTypeTier;
	}

	/**
	 * @return the isStructure
	 */
	public boolean isStructure() {
		return isStructure;
	}

	/**
	 * @param isStructure
	 *            the isStructure to set
	 */
	public void setStructure(boolean isStructure) {
		this.isStructure = isStructure;
	}

	/**
	 * @return the isIndividu
	 */
	public boolean isIndividu() {
		return isIndividu;
	}

	/**
	 * @param isIndividu
	 *            the isIndividu to set
	 */
	public void setIndividu(boolean isIndividu) {
		this.isIndividu = isIndividu;
	}

	/**
	 * @return the estStructure
	 */
	public String estStructure() {
		return estStructure;
	}

	/**
	 * @param estStructure
	 *            the estStructure to set
	 */
	public void setEstStructure(String estStructure) {
		this.estStructure = estStructure;
	}

	/**
	 * @return the estIndividu
	 */
	public String estIndividu() {
		return estIndividu;
	}

	/**
	 * @param estIndividu
	 *            the estIndividu to set
	 */
	public void setEstIndividu(String estIndividu) {
		this.estIndividu = estIndividu;
	}

	/**
	 * @return the tiersTypePers
	 */
	public boolean tiersTypePers() {
		return tiersTypePers;
	}

	/**
	 * @param tiersTypePers
	 *            the tiersTypePers to set
	 */
	public void setTiersTypePers(boolean tiersTypePers) {
		this.tiersTypePers = tiersTypePers;
	}
	
	/**
	 * @return the lesDomaines
	 */
	public NSArray<EODomaine> lesDomaines() {
		if (lesDomaines == null)
			lesDomaines = EODomaine.fetchAllEODomaines(ec, new NSArray(new Object[] {EODomaine.DOM_ID_ASC}));
		return lesDomaines;
	}
	
	/**
	 * @param lesDomaines
	 *            the lesDomaines to set
	 */
	public void setLesDomaines(NSArray<EODomaine> lesDomaines) {
		this.lesDomaines = lesDomaines;
	}

	/**
	 * @return the itemDomaine
	 */
	public EODomaine itemDomaine() {
		return itemDomaine;
	}

	/**
	 * @param itemDomaine
	 *            the itemDomaine to set
	 */
	public void setItemDomaine(EODomaine itemDomaine) {
		this.itemDomaine = itemDomaine;
	}

	/**
	 * @return the checkDomaines
	 */
	public NSMutableArray<EODomaine> checkDomaines() {
		if(checkDomaines == null)
			checkDomaines = new NSMutableArray<EODomaine>();
		return checkDomaines;
	}

	/**
	 * @param checkDomaines the checkDomaines to set
	 */
	public void setCheckDomaines(NSMutableArray<EODomaine> checkDomaines) {
		this.checkDomaines = checkDomaines;
	}
	
	/**
	 * @return the checkDomaineItem
	 */
	public EODomaine checkDomaineItem() {
		return checkDomaineItem;
	}

	/**
	 * @param checkDomaineItem the checkDomaineItem to set
	 */
	public void setCheckDomaineItem(EODomaine checkDomaineItem) {
		this.checkDomaineItem = checkDomaineItem;
	}

	/**
	 * @return the removedDomaines
	 */
	public NSMutableArray<EODomaine> removedDomaines() {
		if(removedDomaines == null)
			removedDomaines = new NSMutableArray<EODomaine>();
		return removedDomaines;
	}

	/**
	 * @param removedDomaines the removedDomaines to set
	 */
	public void setRemovedDomaines(NSMutableArray<EODomaine> removedDomaines) {
		this.removedDomaines = removedDomaines;
	}

	//Activ/Desactiv le checkBox
	public void setDomaineSelected(boolean selected) {
		if (selected) {
			checkDomaines().addObject(itemDomaine());
			removedDomaines().removeObject(itemDomaine());
			wocomponent().setCompetences(null);
			wocomponent().setTabs(null);
			wocomponent().setTabSelection(null);
		}
		else {
			checkDomaines().removeObject(itemDomaine());
			removedDomaines().addObject(itemDomaine());
			wocomponent().setCompetences(null);
			wocomponent().setTabs(null);
			wocomponent().setTabSelection(null);
		}
	}

	public boolean isDomaineSelected() {
		return checkDomaines().containsObject(itemDomaine());
	}

	public boolean lockDomaine() {
		Boolean lock = false;
		if(selectionTypeTier() != null) {
			lock = itemDomaine().typeTiersId().toString().equals(selectionTypeTier().primaryKey());
			itemDomaine().setStyle("font-weight: bold;");
		} else {
			itemDomaine().setStyle("font-weight: normal;font-style:oblique;");
		}
		return !lock;
	}

	// AjaxUpdate
	public WOActionResults majTier() {
		if (selectionTypeTier() != null) {
			wocomponent().setCompetences(null);
			wocomponent().setTabs(null);
			wocomponent().setTabSelection(null);
			wocomponent().mySession().setLeTier(null);
			wocomponent().setTiersTypeIndiv(selectionTypeTier().isIndividu());
			wocomponent().setTiersTypeStr(selectionTypeTier().isStructure());
			wocomponent().setTiersTypeUv(selectionTypeTier().isUv());
			if(selectionTypeTier().isStructure())
				wocomponent().setTitre("Recherche d'entreprises");
			if(selectionTypeTier().isUv())
				wocomponent().setTitre("Recherche des Uvs");
			if(selectionTypeTier().isIndividu()) {
				wocomponent().setQualifierForIndividu(wocomponent().qualifierForIndividus());
				wocomponent().setTitre("Recherche d'enseigants/chercheurs");
			}
			setTiersTypePers(selectionTypeTier().isIndividu()
					|| selectionTypeTier().isStructure());
			setCheckDomaines(null);
			setRemovedDomaines(null);
		} else {
			setLesTypeTiers(null);
			setTiersTypePers(false);
		}
		return null;
	}
}
