/**
 * 
 */
package org.utt.rfcct.serveur.components.commons;

import org.utt.fwkuttcompetences.serveur.modele.rfcct.EOVDataRealCompTree;

import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

import er.extensions.appserver.ERXDisplayGroup;
import er.extensions.eof.ERXS;

/**
 * @author Raymond NANEON <raymond.naneon at utt.fr> 19 ao√ªt 2013
 */
@SuppressWarnings("all")
public class EODataForGroupeSpec {

	private static EODataForGroupeSpec sharedInstance = new EODataForGroupeSpec();
	static EOEditingContext ec;

	public static EODataForGroupeSpec sharedInstance() {
		return sharedInstance;
	}

	public static NSArray getGroupesRacine(EOEditingContext ec) {
		EOQualifier qual = EOVDataRealCompTree.COMPX_ID_PERE.isNull();
		return EOVDataRealCompTree.fetchEOVDataRealCompTrees(ec, qual,
				EOVDataRealCompTree.COMPX_LIBELLE.ascs());
	}

	public static boolean isGroupeRacine(EOVDataRealCompTree groupe) {
		return ((groupe != null) && groupe.toEovDataRealCompTreePere().equals(
				null));
	}

	public static NSArray<EOVDataRealCompTree> rechercherGroupes(
			EOEditingContext ec, EOQualifier qual, int fetchLimit) {
		NSMutableArray array = new NSMutableArray();
		if (qual != null) {
			array.addObject(qual);
		}
		EOFetchSpecification spec = new EOFetchSpecification(EOVDataRealCompTree.ENTITY_NAME, new EOAndQualifier(array),
				EOVDataRealCompTree.COMPX_LIBELLE.ascs());
		if (fetchLimit > 0) {
			spec.setFetchLimit(fetchLimit);
		}
		spec.setUsesDistinct(true);
		NSArray res = ec.objectsWithFetchSpecification(spec);
		return res;
	}
}
