/*******************************************************************************
 * Copyright (c) Raymond NANEON  - 2013.
 * Universite de Technologie de Troyes - CEDRE (www.utt.fr), since 1993.
 * This software is governed by the CeCILL license under French law and abiding by the
 * rules of distribution of free software. You can use, modify and/or 
 * redistribute the software under the terms of the CeCILL license as 
 * circulated by CEA, CNRS and INRIA at the following URL 
 * "http://www.cecill.info". 
 * As a counterpart to the access to the source code and rights to copy, modify 
 * and redistribute granted by the license, users are provided only with a 
 * limited warranty and the software's author, the holder of the economic 
 * rights, and the successive licensors have only limited liability. In this 
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user 
 * in light of its specific status of free software, that may mean that it
 * is complicated to manipulate, and that also therefore means that it is 
 * reserved for developers and experienced professionals having in-depth
 * computer knowledge. Users are therefore encouraged to load and test the 
 * software's suitability as regards their requirements in conditions enabling
 * the security of their systems and/or data to be ensured and, more generally, 
 * to use and operate it in the same conditions as regards security. The
 * fact that you are presently reading this means that you have had knowledge 
 * of the CeCILL license and that you accept its terms.
 * 
 * Do not remove this copyright message
 * 
 * Contributors:
 *     Raymond NANEON - initial API and implementation
 ******************************************************************************/
/**
 * 
 */
package org.utt.rfcct.serveur.components.assistants.modules;

import org.cocktail.fwkcktlpersonne.common.metier.EOTitulaireDiplome;
import org.utt.fwkuttcompetences.serveur.CompetenceApplicationUser;
import org.utt.fwkuttcompetences.serveur.modele.rfcct.EOCapacite;
import org.utt.fwkuttcompetences.serveur.modele.rfcct.EOCompetence;
import org.utt.fwkuttcompetences.serveur.modele.rfcct.EODomaine;
import org.utt.fwkuttcompetences.serveur.modele.rfcct.EOMatiere;
import org.utt.fwkuttcompetences.serveur.modele.rfcct.EOTerrain;
import org.utt.rfcct.serveur.components.Accueil;
import org.utt.rfcct.serveur.components.BaseComponent;
import org.utt.rfcct.serveur.components.Competence;
import org.utt.rfcct.serveur.components.assistants.Assistant;
import org.utt.rfcct.serveur.components.controlers.ModuleCtrl;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSForwardException;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSNotificationCenter;
import com.webobjects.foundation.NSTimestamp;
import com.webobjects.foundation.NSValidation.ValidationException;

/**
 * @author Raymond NANEON <raymond.naneon at utt.fr> 21 mars 2013
 */
@SuppressWarnings("all")
public class ModuleAssistant extends BaseComponent implements IModuleAssistant {

	/**
	 * 
	 */
	private static final long serialVersionUID = -1477247271421355576L;
	public static final String BDG_editingContext = "editingContext";
	public static final String BDG_utilisateurPersId = "utilisateurPersId";
	public static final String BDG_competence = "competence";
	public static final String BDG_domaine = "domaine";
	public static final String BDG_selectedDomaine = "selectedDomaine";
	public static final String BDG_matiere = "matiere";
	public static final String BDG_terrain = "terrain";
	public static final String BDG_capacite = "capacite";
	public static final String APPLICATION_USER_BDG = "applicationUser";
	public static final String MODULE_BDG = "module";
	public static String STYLE_BDG = "styleCss";
	public static String CLASS_BDG = "classeCss";
	public static String FORM_ID_BDG = "formID";
	public static String ASSISTANT_BDG = "assistant";

	private ModuleCtrl ctrl = null;
	private String styleCss;
	private String classeCss;
	private IModuleAssistant module;
	private EOEditingContext editingContext;
	private Integer utilisateurPersId;
	private Assistant assistant;
	private EOCompetence competence;
	private EODomaine domaine;
	private EOMatiere matiere;
	private EOTerrain terrain;
	private EOCapacite capacite;
	public String updateContainerId;
	public String formID;
	private Boolean _disabled;
	private CompetenceApplicationUser applicationUser;
	// Commentaire
	private String commentaire;
	private String failureMessage;

	// Domaine
	private EODomaine selectedDomaine;
	
	//Lsite compétences tier
	private NSMutableArray<EOCompetence> competences;

	/**
	 * @param context
	 */
	public ModuleAssistant(WOContext context) {
		super(context);
		// TODO Auto-generated constructor stub
	}

	public ModuleAssistant(WOContext context, ModuleCtrl controler) {
		super(context);
		ctrl = controler;
		_disabled = null;
	}

	@Override
	public void appendToResponse(WOResponse response, WOContext context) {
		setModule(this);
		super.appendToResponse(response, context);
	}

	public WOComponent submit() {
		return null;
	}

	// Domaine de la page précédente

	/**
	 * @return the selectedDomaine
	 */
	public EODomaine selectedDomaine() {
		EODomaine domaine = competence().domaine();
		this.selectedDomaine = domaine;
		return this.selectedDomaine;
	}

	// Reinitialisation de la seconde page en cas de changement de domaine de la
	// page précédente
	/**
	 * @param selectedDomaine
	 *            the selectedDomaine to set
	 */
	public void setSelectedDomaine(EODomaine selectedDomaine) {
		this.selectedDomaine = selectedDomaine;
		setValueForBinding(selectedDomaine, BDG_selectedDomaine);
	}

	/**
	 * @return the ctrl
	 */
	public ModuleCtrl ctrl() {
		return ctrl;
	}

	/**
	 * @param ctrl
	 *            the ctrl to set
	 */
	public void setCtrl(ModuleCtrl ctrl) {
		this.ctrl = ctrl;
	}

	/**
	 * @return the commentaire
	 */
	public String commentaire() {
		return commentaire;
	}

	/**
	 * @param commentaire
	 *            the commentaire to set
	 */
	public void setCommentaire(String commentaire) {
		this.commentaire = commentaire;
	}

	/**
	 * @return the competence
	 */
	public EOCompetence competence() {
		if (this.competence == null) {
			EOCompetence competenceFromParent = (EOCompetence) valueForBinding(BDG_competence);
			if ((competenceFromParent != null)
					&& (competenceFromParent.editingContext() != null))
				this.competence = competenceFromParent;
		}
		return this.competence;
	}

	/**
	 * @param competence
	 *            the competence to set
	 */
	public void setcompetence(EOCompetence competence) {
		this.competence = competence;
		setValueForBinding(competence, BDG_competence);
	}

	/**
	 * @return the domaine
	 */
	public EODomaine domaine() {
		if (this.domaine == null) {
			EODomaine domaineFromParent = (EODomaine) valueForBinding(BDG_domaine);
			if ((domaineFromParent != null)
					&& (domaineFromParent.editingContext() != null))
				this.domaine = domaineFromParent;
		}
		return domaine;
	}

	/**
	 * @param domaine
	 *            the domaine to set
	 */
	public void setDomaine(EODomaine domaine) {
		this.domaine = domaine;
		setValueForBinding(domaine, BDG_domaine);
	}

	/**
	 * @return the matiere
	 */
	public EOMatiere matiere() {
		if (this.matiere == null) {
			EOMatiere matiereFromParent = (EOMatiere) valueForBinding(BDG_matiere);
			if ((matiereFromParent != null)
					&& (matiereFromParent.editingContext() != null))
				this.matiere = matiereFromParent;
		}
		return matiere;
	}

	/**
	 * @param matiere
	 *            the matiere to set
	 */
	public void setMatiere(EOMatiere matiere) {
		this.matiere = matiere;
		setValueForBinding(matiere, BDG_matiere);
	}

	/**
	 * @return the terrain
	 */
	public EOTerrain terrain() {
		if (this.terrain == null) {
			EOTerrain terrainFromParent = (EOTerrain) valueForBinding(BDG_terrain);
			if ((terrainFromParent != null)
					&& (terrainFromParent.editingContext() != null))
				this.terrain = terrainFromParent;
		}
		return terrain;
	}

	/**
	 * @param terrain
	 *            the terrain to set
	 */
	public void setTerrain(EOTerrain terrain) {
		this.terrain = terrain;
		setValueForBinding(terrain, BDG_terrain);
	}

	/**
	 * @return the capacite
	 */
	public EOCapacite capacite() {
		if (this.capacite == null) {
			EOCapacite capaciteFromParent = (EOCapacite) valueForBinding(BDG_capacite);
			if ((capaciteFromParent != null)
					&& (capaciteFromParent.editingContext() != null))
				this.capacite = capaciteFromParent;
		}
		return capacite;
	}

	/**
	 * @param capacite
	 *            the capacite to set
	 */
	public void setCapacite(EOCapacite capacite) {
		this.capacite = capacite;
		setValueForBinding(capacite, BDG_capacite);
	}

	public Boolean _disabled() {
		if (_disabled == null) {
			_disabled = competence() == null
					|| !myJefyUser().hasDroitModificationCompetence();
		}
		return _disabled;
	}

	public boolean isInAssistant() {
		return assistant() != null;
	}

	public boolean isStandAlone() {
		return assistant() == null;
	}

	/**
	 * @return the styleCss
	 */
	public String styleCss() {
		return (String) valueForBinding(STYLE_BDG);
	}

	/**
	 * @param styleCss
	 *            the styleCss to set
	 */
	public void setStyleCss(String styleCss) {
		this.styleCss = styleCss;
	}

	/**
	 * @return the classeCss
	 */
	public String classeCss() {
		return (String) valueForBinding(CLASS_BDG);
	}

	/**
	 * @param classeCss
	 *            the classeCss to set
	 */
	public void setClasseCss(String classeCss) {
		this.classeCss = classeCss;
	}

	/**
	 * @return the assistant
	 */
	public Assistant assistant() {
		if (hasBinding(ASSISTANT_BDG)) {
			assistant = (Assistant) valueForBinding(ASSISTANT_BDG);
		}
		return assistant;
	}

	/**
	 * @param assistant
	 *            the assistant to set
	 */
	public void setAssistant(Assistant assistant) {
		this.assistant = assistant;
		if (hasBinding(ASSISTANT_BDG)) {
			setValueForBinding(assistant, ASSISTANT_BDG);
		}
	}

	/**
	 * @return the utilisateurPersId
	 */
	public Integer utilisateurPersId() {
		if (hasBinding(BDG_utilisateurPersId)) {
			utilisateurPersId = (Integer) valueForBinding(BDG_utilisateurPersId);
		}
		return utilisateurPersId;
	}

	/**
	 * @param utilisateurPersId
	 *            the utilisateurPersId to set
	 */
	public void setUtilisateurPersId(Integer utilisateurPersId) {
		this.utilisateurPersId = utilisateurPersId;
		if (hasBinding(BDG_utilisateurPersId)) {
			setValueForBinding(utilisateurPersId, BDG_utilisateurPersId);
		}
	}

	/**
	 * @return the applicationUser
	 */
	public CompetenceApplicationUser applicationUser() {
		if (applicationUser == null) {
			if (isStandAlone()) {
				if (hasBinding(APPLICATION_USER_BDG)
						&& valueForBinding(APPLICATION_USER_BDG) != null) {
					CompetenceApplicationUser appUser = (CompetenceApplicationUser) valueForBinding(APPLICATION_USER_BDG);
					applicationUser = appUser;
				}
			} else {
				applicationUser = assistant().applicationUser();
			}
		}
		return applicationUser;
	}

	/**
	 * @param applicationUser
	 *            the applicationUser to set
	 */
	public void setApplicationUser(CompetenceApplicationUser applicationUser) {
		if (isStandAlone()) {
			if (canSetValueForBinding(APPLICATION_USER_BDG)) {
				setValueForBinding(applicationUser, APPLICATION_USER_BDG);
			}
		} else {
			assistant().setApplicationUser(applicationUser);
		}
		this.applicationUser = applicationUser;
	}

	/**
	 * @return the module
	 */
	public IModuleAssistant module() {
		return module;
	}

	/**
	 * @param module
	 *            the module to set
	 */
	public void setModule(IModuleAssistant module) {
		this.module = module;
		setValueForBinding(module, MODULE_BDG);
	}

	/**
	 * @return the editingContext
	 */
	public EOEditingContext editingContext() {
		return (EOEditingContext) valueForBinding(BDG_editingContext);
	}

	/**
	 * @param editingContext
	 *            the editingContext to set
	 */
	public void setEditingContext(EOEditingContext editingContext) {
		this.editingContext = editingContext;
	}

	// Gestion des boutons de l'assistant
	public boolean isPrecedentDisabled() {
		return false;
	}

	public void onPrecedent() {
	}

	public boolean isSuivantDisabled() {
		return false;
	}

	public void onSuivant() {
	}

	public boolean isTerminerDisabled() {
		return true;
	}

	public boolean valider() {
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.utt.rfcct.serveur.components.assistants.modules.IModuleAssistant#
	 * fromPrecedent()
	 */
	@Override
	public boolean fromPrecedent() {
		// TODO Auto-generated method stub
		return true;
	}

	// Traitement
	public WOActionResults enregistrer() {
		try {
			competence().setDateModif(new NSTimestamp());
			competence().setPersIdModif(applicationUser().getPersId());
			editingContext().saveChanges();
			NSMutableDictionary userInfos = new NSMutableDictionary();
			userInfos.setObjectForKey(editingContext(), "edc");
			NSNotificationCenter.defaultCenter().postNotification(
					"refreshTranchesNotification", this, userInfos);
			mySession().addSimpleInfoMessage(
					"RFCCT",
					"Competence '" + competence().numeroCompetence()
							+ "' modifiée avec succès");
		} catch (ValidationException e) {
			context().response().setStatus(500);
			mySession().addSimpleErrorMessage("RFCCT", e.getMessage());
		} catch (Throwable e) {
			context().response().setStatus(500);
			throw NSForwardException._runtimeExceptionForThrowable(e);
		}
		return null;
	}

	public WOActionResults accueil() {
		return (Accueil) pageWithName(Accueil.class.getName());
	}

	public WOActionResults consulter() {
		Competence nextPage = (Competence) pageWithName(Competence.class
				.getName());
		nextPage.setCompetence(competence());
		mySession().setPageCompetence(nextPage);
		return nextPage;
	}

	public void sleep() {
		super.sleep();
		this.competence = null;
		this.failureMessage = null;
	}

	/**
	 * @return the failureMessage
	 */
	public String failureMessage() {
		return failureMessage;
	}

	public void setFailureMessage(String failureMessage) {
		this.failureMessage = failureMessage;
		if (failureMessage != null) {
			mySession().addSimpleErrorMessage("Erreur", failureMessage);
		} else {
			mySession().addSimpleErrorMessage("", "");
		}
	}

	/**
	 * @return the competences
	 */
	public NSMutableArray<EOCompetence> competences() {
		if(competences == null)
			competences = new NSMutableArray<EOCompetence>();
		return competences;
	}

	/**
	 * @param competences the competences to set
	 */
	public void setCompetences(NSMutableArray<EOCompetence> competences) {
		this.competences = competences;
	}

}
